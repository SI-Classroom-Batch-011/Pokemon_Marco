package Kanto

import Attacken.PokemonAttacke
import Items.Heiler
import Items.Pokeball
import Pokemon.Pokemon
import Pokemon.pokemonList
import PokemonTypen.PokemonType
import Trainer.Boss


// Starterpokemon
private var glumanda =
    Pokemon(
        "Glumanda",
        PokemonType.FEUER,
        95,
        200,
        1000,
        100,
        mutableListOf(PokemonAttacke.Kratzer, PokemonAttacke.Glut)
    )
private var shiggy = Pokemon(
    "Schiggy", PokemonType.WASSER, 5, 44, 48, 65, mutableListOf(PokemonAttacke.Tackle, PokemonAttacke.Aquaknarre)
)
private var bisasam =
    Pokemon("Bisasam", PokemonType.PFLANZE, 5, 45, 49, 49, mutableListOf(PokemonAttacke.Tackle, PokemonAttacke.Absorb))


// Liste F√ºr Pokemon f√ºr den Trainer
var trainerPokemon: MutableList<Pokemon> = mutableListOf()

// Die Klasse ist die Welt
open class Kanto() {

    // Checkt ob alle Pokemon HP 0 sind
    val continueGame: Boolean
        get() {
            return trainerPokemon.any { it.hp > 0 }
        }

    // Boss inizialiesiert
    var boss: Boss = Boss()

    // Gemschte Kopie der Pokemon Liste
    var pokemonListe: MutableList<Pokemon> = pokemonList.shuffled().toMutableList()

    /**
     * Diese Funktion erm√∂glicht dem Spieler die Auswahl eines Starter-Pok√©mon aus einer vordefinierten Liste.
     */
    fun starterPokemonAuswahl() {

        // Ank√ºndigung der verf√ºgbaren Starter-Pok√©mon
        printLetterByLetter("Diese Pokemon habe ich f√ºr dich zu auswahl:\n\n")
        var validInput = false

        // Liste der verf√ºgbaren Starter-Pok√©mon
        val starterPokemon = mutableListOf<Pokemon>(glumanda, shiggy, bisasam)

        // Zeigt die verf√ºgbaren Pok√©mon mit Verz√∂gerung an
        for (pokemon in starterPokemon) {
            println(pokemon)
            Thread.sleep(1000)
        }
        while (!validInput) {
            try {
                // Spieler w√§hlt ein Pok√©mon aus
                printLetterByLetter("1Ô∏è‚É£ f√ºr : ${glumanda.name} 2Ô∏è‚É£ f√ºr : ${shiggy.name} 3Ô∏è‚É£ f√ºr : ${bisasam.name}")
                println()
                Thread.sleep(500)


                println("W√§hle ein Pokemon aus gebe eine Zahl von 1Ô∏è‚É£ bis 3Ô∏è‚É£ ein: ")

                val input = readln().toInt()

                // Hinzuf√ºgen des ausgew√§hlten Pok√©mon zum Team des Spielers
                when (input) {
                    1 -> trainerPokemon.add(starterPokemon[input - 1])
                    2 -> trainerPokemon.add(starterPokemon[input - 1])
                    3 -> trainerPokemon.add(starterPokemon[input - 1])

                }

                // Wiedergabe des Ger√§uschs des ausgew√§hlten Pok√©mon
                starterPokemon[input - 1].pokemonGeraeusche()
                printLetterByLetter("üëç Du hast dich f√ºr ${starterPokemon[input - 1].name} entschieden gute Wahl üëç\n\n")
                return

            } catch (e: Exception) {
                println("‚ùå Falsche Eingabe Versuche es nochmal ‚ùå")
                validInput = false
            }
        }
    }

    /**
     * Diese Funktion startet einen wilden Pok√©mon-Kampf zwischen dem Spieler und einem wilden Pok√©mon.
     *
     * @param trainerPokemon Die Pok√©mon des Spielers in Form einer Liste.
     */
    fun kampfWildePokemon() {

        // Zuf√§llige Auswahl eines wilden Pok√©mon aus der Pok√©mon-Liste
        var wildePokemon = pokemonListe.random()

        // Auswahl des ersten Pok√©mon des Spielers
        var playerPokemon = trainerPokemon.first()

        // Ank√ºndigung des Kampfes
        printLetterByLetter("\nEin wildes ${wildePokemon.name}, Level: ${wildePokemon.lvl} ist aufgetaucht\n")
        printLetterByLetter("‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è\n")
        printLetterByLetter("Ich W√§hle Dich ${playerPokemon.name} ‚ÄºÔ∏è\n\n")
        playerPokemon.pokemonGeraeusche()
        printLetterByLetter("ü•ä Kampf zwischen ${playerPokemon.name} und Wildem ${wildePokemon.name} ü•ä\n\n")
        printLetterByLetter("‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è\n")

        // Der Kampf l√§uft, solange das wilde Pok√©mon und mindestens ein Pok√©mon des Spielers noch HP √ºbrig haben
        while (wildePokemon.hp > 0 && trainerPokemon.any { it.hp > 0 }) {


            // Anzeige der aktuellen HP und Level beider Pok√©mon
            println()
            printLetterByLetter("${wildePokemon.name}  HP: ${wildePokemon.hp}  LVL:${wildePokemon.lvl}\n\n")

            printLetterByLetter("${playerPokemon.name} HP: ${playerPokemon.hp} LVL:${playerPokemon.lvl}\n\n")

            // √úberpr√ºfung der Spieler-Eingabe
            var validInput = false


            while (!validInput) {
                try {
                    println("1Ô∏è‚É£: Attacke 2Ô∏è‚É£: Fliehen\n3Ô∏è‚É£: Items 4Ô∏è‚É£: Deine Pokemon:")
                    var input = readln().toInt()
                    when (input) {
                        1 -> {
                            // Auswahl einer Attacke
                            printLetterByLetter("üí•W√§hle eine Attacke ausüí•:\n")
                            playerPokemon.attacke.forEachIndexed { i, attack ->
                                println("${i + 1}: $attack")
                            }
                            var input = readln().toInt()
                            if (input <= playerPokemon.attacke.size) {
                                attackeAuswahl(playerPokemon, wildePokemon, input - 1)
                                validInput = true
                            } else {
                                println("‚ùå Ung√ºltige Eingabe ‚ÄºÔ∏è Bitte eine Zahl eingeben ‚ùå")
                                validInput = false
                            }

                        }

                        2 -> {
                            // Flucht aus dem Kampf
                            printLetterByLetter("Du bist geflohen‚ÄºÔ∏èüèÉ‚Äçüí®\n\n")
                            printLetterByLetter("üåç L√§uft Durch die Welt üåé\n\n")
                            return
                        }

                        3 -> {
                            // Auswahl eines Items
                            printLetterByLetter("1Ô∏è‚É£: Heiler 2Ô∏è‚É£: Pok√©ball\nüóÉÔ∏èW√§hle ein Item aus der Item BoxüóÉÔ∏è:\n")
                            var input = readln().toInt()
                            when (input) {
                                1 -> {
                                    // Heilung des Spieler-Pok√©mon
                                    Heiler().heilen(playerPokemon)
                                    println()
                                    printLetterByLetter("ü©πü©π${playerPokemon.name} wurde um ${playerPokemon.standartHp - playerPokemon.hp} geheiltü©πü©π")
                                }

                                2 -> {
                                    // Versuch, das wilde Pok√©mon zu fangen
                                    val fangchance = (10..100).random()
                                    Pokeball().pokemonFangen(wildePokemon, fangchance, trainerPokemon)
                                    return

                                }

                                else -> {
                                    println()
                                    println("‚ùå Ung√ºltige Eingabe ‚ÄºÔ∏è Bitte eine Zahl eingeben ‚ùå\n")
                                    continue
                                }
                            }
                            validInput = true
                        }

                        4 -> {
                            // Auswahl eines anderen Pok√©mon aus dem Team des Spielers
                            playerPokemon = pokemonAuswahl()
                            validInput = true
                        }

                        else -> {
                            println()
                            println("‚ùå Ung√ºltige Eingabe ‚ÄºÔ∏è Bitte eine Zahl eingeben ‚ùå\n")
                            validInput = false
                        }
                    }
                } catch (e: Exception) {
                    println()
                    println("‚ùå Ung√ºltige Eingabe ‚ÄºÔ∏è Bitte eine Zahl eingeben ‚ùå\n")
                    validInput = false
                }
            }
            // Das wilde Pok√©mon f√ºhrt einen Angriff aus, falls es noch lebt
            if (wildePokemon.hp > 0) {
                wildePokemonAttacke(wildePokemon, playerPokemon)
            }
        }
        // Das Spieler-Pok√©mon hat keine HP mehr, es wird ausgetauscht
        if (playerPokemon.hp < 0) {
            printLetterByLetter("ü™¶ ${playerPokemon.name} wurde besiegt ‚ÄºÔ∏èü™¶\n\n")
            playerPokemon = pokemonAuswahl()
        }
        // Der Kampf ist vorbei, das wilde Pok√©mon wurde besiegt
        if (wildePokemon.hp < 0) {
            println()
            printLetterByLetter("ü™¶ Wildes ${wildePokemon.name} wurde besiegt ‚ÄºÔ∏èü™¶\n\n")
            Items.printLetterByLetter("‚ùå Kampf beendet ‚ùå\n")
            Items.printLetterByLetter("üåçL√§uft Durch die Weltüåé\n")
            playerPokemon.standartHp
            playerPokemon.lvlUp()
            pokemonListe
            return
        }
    }


    /**
     * Diese Funktion berechnet den Schaden, den ein angreifendes Pok√©mon einem verteidigenden Pok√©mon mit einer bestimmten Attacke zuf√ºgt.
     *
     * @param pokemonAtk Das angreifende Pok√©mon.
     * @param pokeonDef Das verteidigende Pok√©mon.
     * @param attackName Die verwendete Attacke.
     * @return Der berechnete Schaden als Ganzzahl.
     */
    fun schaden(pokemonAtk: Pokemon, pokeonDef: Pokemon, attackName: PokemonAttacke): Int {

        // Der Basis-Schaden der Attacke
        val basisSchaden = attackName.schaden

        // Die Schadensberechnung unter Ber√ºcksichtigung der Angriffs- und Verteidigungswerte der Pok√©mon
        val schaden = (pokemonAtk.atk * basisSchaden) / pokeonDef.def
        return schaden

    }

    /**
     * Diese Funktion simuliert die Bewegung des Spielers in der Spielwelt.
     * Der Spieler bewegt sich, sammelt Schritte und hat die Chance, auf wilde Pok√©mon zu treffen oder gegen seinen Rivalen anzutreten.
     */
    fun bewegung() {

        // Anzeige der Bewegung in der Welt
        printLetterByLetter("üåçL√§uft Durch die Weltüåé\n")

        // Initialisierung der Schritte und zuf√§llige Schritte bis zur Begegnung mit wilden Pok√©mon
        var steps = 0
        val stepsUntilWildPokemonAppears = (10..50).random()

        // Schleife f√ºr die Bewegung
        do {
            printLetterByLetter("üí®üëü‚Äç")
            steps += (10..20).random()
            // √úberpr√ºfung, ob eine Begegnung mit wilden Pok√©mon stattfindet
            if (steps % stepsUntilWildPokemonAppears == 0) {
                kampfWildePokemon()
            }
            // √úberpr√ºfung, ob der Spieler bereit ist, gegen seinen Rivalen anzutreten
            else if (trainerPokemon.any { it.lvl >= 100 }) {
                printLetterByLetter("\nü•äDu Bist bereit gegen dein Rivalen zu K√§mpfenü•ä\n\n")
                return

            }
        } while (continueGame)
    }

    /**
     * Diese Funktion erm√∂glicht dem Spieler die Auswahl eines Pok√©mon aus seinem aktuellen Team.
     *
     * @return Das ausgew√§hlte Pok√©mon.
     */
    fun pokemonAuswahl(): Pokemon {
        // Anzeige der Auswahlm√∂glichkeiten
        println("W√§hle ein Pokemon aus:")

        // Anzeige der Pok√©mon im Trainer-Team
        trainerPokemon.forEachIndexed { index, pokemon ->
            println("${index + 1}. ${pokemon.name}")
        }
        try {
            // Spieler w√§hlt ein Pok√©mon aus
            val index = readln().toInt() - 1

            // √úberpr√ºfung der Auswahl
            if (index >= 0 && index < trainerPokemon.size) {

                val selectedPokemon = trainerPokemon[index]
                println()
                printLetterByLetter("${selectedPokemon.name}, Ich W√§hle Dich ‚ÄºÔ∏è")
                selectedPokemon.pokemonGeraeusche()
                return selectedPokemon
            } else {
                println()
                printLetterByLetter("‚ùå Ung√ºltige Auswahl ‚ÄºÔ∏è Bitte eine Zahl ein von 1 bis ${trainerPokemon.size} ‚ùå")
            }
        } catch (e: Exception) {
            println()
            printLetterByLetter("‚ùå Ung√ºltige Eingabe ‚ÄºÔ∏è Bitte eine Zahl eingeben ‚ùå")
        }
        // Rekursiver Aufruf, falls die Auswahl ung√ºltig war
        return pokemonAuswahl()
    }


    /**
     * Diese Funktion erm√∂glicht dem Spieler die Auswahl einer Attacke f√ºr sein Pok√©mon und f√ºhrt die Attacke gegen ein wildes Pok√©mon aus.
     *
     * @param playerPokemon Das Pok√©mon des Spielers, das die Attacke ausf√ºhrt.
     * @param wildePokemon Das wilde Pok√©mon, gegen das die Attacke ausgef√ºhrt wird.
     * @param attackeIndex Der Index der ausgew√§hlten Attacke im Attacke-Array des Spieler-Pok√©mons.
     */
    fun attackeAuswahl(playerPokemon: Pokemon, wildePokemon: Pokemon, attackeIndex: Int) {

        // Auswahl der auszuf√ºhrenden Attacke
        var playerAttack = playerPokemon.attacke[attackeIndex]

        // Berechnung des Schadens, den die Attacke verursacht
        val damage = schaden(playerPokemon, wildePokemon, playerAttack)

        // Anzeige des Angriffs und des verursachten Schadens
        println()
        printLetterByLetter("üí•${playerPokemon.name} setzt $playerAttack ein und f√ºgt $damage Schaden zu ‚ÄºÔ∏èüí•\n")

        // Reduzierung der HP des wilden Pok√©mon entsprechend dem verursachten Schaden
        wildePokemon.hp -= damage

        // Anzeige der verbleibenden HP des wilden Pok√©mon
        printLetterByLetter("Wildes ${wildePokemon.name} hat noch ${wildePokemon.hp} HP\n")
        return
    }

    /**
     * Diese Funktion simuliert den Angriff eines wilden Pok√©mon auf das Pok√©mon des Spielers und berechnet den verursachten Schaden.
     *
     * @param wildePokemon Das wilde Pok√©mon, das den Angriff ausf√ºhrt.
     * @param playerPokemon Das Pok√©mon des Spielers, das verteidigt.
     */
    fun wildePokemonAttacke(wildePokemon: Pokemon, playerPokemon: Pokemon) {

        // Zuf√§llige Auswahl einer Attacke f√ºr das wilde Pok√©mon
        val wildAttack = wildePokemon.attacke.random()

        // Berechnung des Schadens, den die Attacke verursacht
        val damage = schaden(wildePokemon, playerPokemon, wildAttack)

        // Anzeige des Angriffs und des verursachten Schadens
        println()
        printLetterByLetter(" üí•Wildes ${wildePokemon.name} setzt $wildAttack ein und f√ºgt $damage Schaden zu ‚ÄºÔ∏è üí•\n")

        // Reduzierung der HP (Lebenspunkte) des Spieler-Pok√©mons entsprechend dem verursachten Schaden
        playerPokemon.hp -= damage

        // Anzeige der verbleibenden HP des Spieler-Pok√©mons
        printLetterByLetter("${playerPokemon.name} hat noch ${playerPokemon.hp}HP\n")
        return
    }

    /**
     * Diese Funktion repr√§sentiert das Hauptspiel, bei dem der Spieler sein Starter-Pok√©mon ausw√§hlt, die Spielwelt erkundet
     * und gegen den Boss k√§mpft. Das Spiel wird wiederholt gespielt, solange der Spieler sich entscheidet, ein neues Spiel zu starten.
     */
    fun game() {
        do {

            // Der Spieler w√§hlt sein Starter-Pok√©mon aus
            starterPokemonAuswahl()

            // Der Spieler bewegt sich in der Spielwelt und hat die Chance auf Begegnungen und K√§mpfe
            bewegung()

            // Der Spieler tritt gegen den Boss an
            boss.bossKampf()

        } while (newGame())


    }

    /**
     * Diese Funktion fragt den Spieler, ob er ein neues Spiel starten m√∂chte, und verarbeitet seine Entscheidung.
     *
     * @return `true`, wenn der Spieler ein neues Spiel starten m√∂chte, andernfalls `false`.
     */
    fun newGame(): Boolean {

        // Kopie des Trainer-Pok√©mon-Teams
        var playerPokemon = trainerPokemon

        // Abfrage, ob der Spieler ein neues Spiel starten m√∂chte
        println("Willst du nochmal Zocken? (ja/nein): ")
        val entscheidung = readln().trim().lowercase()
        Thread.sleep(1000)

        // Zur√ºcksetzen von Werten und Listen im Spiel, wenn der Spieler zustimmt
        when (entscheidung) {
            "ja", "j", "yes", "y" -> {
                println("Noch eine Runde üëç")
                // Zur√ºcksetzen der Starter-Pok√©mon und des Trainer-Teams
                glumanda.reset()
                shiggy.reset()
                bisasam.reset()
                playerPokemon.clear()
                return true
            }
            // Beendet das Spiel
            "nein", "n", "no" -> {
                printLetterByLetter("Danke f√ºrs Zocken‚ÄºÔ∏è")
                printLetterByLetter("Bye üëãüëãüëã")
                return false
            }
            // Bei falscher Eingabe wiederholen
            else -> {
                println("‚ùå Ung√ºltige Eingabe ‚ÄºÔ∏è Bitte ja oder nein eingeben‚ùå")
                return newGame()
            }
        }
    }

    /**
     * Diese Funktion gibt einen Text Buchstabe f√ºr Buchstabe aus und simuliert dadurch einen typischen Texteffekt.
     *
     * @param text Der Text, der Buchstabe f√ºr Buchstabe ausgegeben werden soll.
     */
    fun printLetterByLetter(text: String) {
        // Schleife, um jeden Buchstaben im Text nacheinander auszugeben
        for (char in text) {
            print(char)
            Thread.sleep(0) // Eine kurze Verz√∂gerung f√ºr den Effekt
        }
    }
}